version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: pixora-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pixora_craftt
      POSTGRES_USER: pixora_user
      POSTGRES_PASSWORD: pixora_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - pixora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixora_user -d pixora_craftt"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pixora-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pixora-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Services
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: pixora-api-gateway
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - API_GATEWAY_PORT=4000
      - AUTH_SERVICE_URL=http://auth-service:4001
      - CMS_SERVICE_URL=http://cms-service:4002
      - ADMIN_SERVICE_URL=http://admin-service:4003
      - DATABASE_URL=postgresql://pixora_user:pixora_password@postgres:5432/pixora_craftt
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - FRONTEND_URL=http://localhost:3000
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pixora-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: pixora-auth-service
    restart: unless-stopped
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_PORT=4001
      - DATABASE_URL=postgresql://pixora_user:pixora_password@postgres:5432/pixora_craftt
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRE=24h
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pixora-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cms-service:
    build:
      context: ./backend/cms-service
      dockerfile: Dockerfile
    container_name: pixora-cms-service
    restart: unless-stopped
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=development
      - CMS_SERVICE_PORT=4002
      - DATABASE_URL=postgresql://pixora_user:pixora_password@postgres:5432/pixora_craftt
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - AWS_ACCESS_KEY_ID=your-aws-access-key
      - AWS_SECRET_ACCESS_KEY=your-aws-secret-key
      - AWS_BUCKET_NAME=pixora-craftt-assets
      - AWS_REGION=us-east-1
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pixora-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-service:
    build:
      context: ./backend/admin-service
      dockerfile: Dockerfile
    container_name: pixora-admin-service
    restart: unless-stopped
    ports:
      - "4003:4003"
    environment:
      - NODE_ENV=development
      - ADMIN_SERVICE_PORT=4003
      - DATABASE_URL=postgresql://pixora_user:pixora_password@postgres:5432/pixora_craftt
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pixora-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pixora-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:4000/api
      - VITE_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
      - VITE_SENTRY_DSN=https://your-sentry-dsn
    depends_on:
      - api-gateway
    networks:
      - pixora-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Monitoring and Infrastructure
  nginx:
    image: nginx:alpine
    container_name: pixora-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - pixora-network

  prometheus:
    image: prom/prometheus:latest
    container_name: pixora-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pixora-network

  grafana:
    image: grafana/grafana:latest
    container_name: pixora-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pixora-network

  # Development tools
  adminer:
    image: adminer:latest
    container_name: pixora-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - pixora-network
    profiles:
      - dev

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pixora-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - pixora-network
    profiles:
      - dev

networks:
  pixora-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: 